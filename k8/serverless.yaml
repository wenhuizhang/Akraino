# Copyright 2018 AT&T Intellectual Property.  All other rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

heat_template_version: 2015-10-15

description: >
  Hot Template to deploy a kubernetes cluster on Ubuntu.

parameters:
  k8_image:
    type: string
    description: Image ID
    default: ubuntu16_04
  k8_flavor:
    type: string
    description: Type of instance (flavor) to be used
    default: m1.large
  k8_master:
    type: string
    description: Name of master node
    default: secure-edge-1
  k8_minion1:
    type: string
    description: Name of minion node 1
    default: secure-edge-2
  k8_minion2:
    type: string
    description: Name of minion node 2
    default: secure-edge-3
  k8_passwd:
    type: string
    description: Name of minion node 2
    default: Serverless123
  k8_network_cidr:
    type: string
    description: Pod network cidr
    default: 10.100.0.0/16
  NetID:
    type: string
    description: External Network ID
    default: public

resources:
  node_files_init:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
        chpasswd:
          list:
            str_replace:
                template: |
                    root:CPASSWD
                    ubuntu:CPASSWD
                params:
                    CPASSWD: { get_param: k8_passwd }
          expire: False
        ssh_pwauth: True
        write_files:
        - path: /root/preinstall.sh
          owner: "root:root"
          permissions: "0755"
          content: |
            #!/bin/bash

            # VERIFY NTP IS SETUP
            if ! dpkg -l | grep "ntp " > /dev/nul; then apt-get install -y ntp 2>&1; fi

            # ADD KUBERNETES SOURCES
            apt-get update 2>&1
            apt-get install -y apt-transport-https 2>&1
            curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -  2>&1
            echo "deb http://apt.kubernetes.io/ kubernetes-xenial main" >/etc/apt/sources.list.d/kubernetes.list
            apt-get update 2>&1

            # INSTALL DOCKER AND K8 IF THEY ARE NOT INSTALLED ALREADY.
            apt-get install -y docker.io aufs-tools  2>&1
            # apt-get install -y kubeadm=1.9.7-00 kubelet=1.9.7-00 kubectl=1.9.7-00 kubernetes-cni --allow-downgrades  2>&1
	    apt-get install -y kubeadm=1.11.0-00 kubelet=1.11.0-00 kubectl=1.10.2-00 kubernetes-cni=0.6.0-00 --allow-downgrades 2>&1	
		
            # INSTALL PYTHON AND OTHER TOOLS
            apt-get install -y python2.7-dev python-pip python-setuptools python-crypto unzip 2>&1
            pip install --upgrade pip
            
            # ADD HOSTNAME
            MYHOSTNAME=$(hostname)
            MYIP=$(ifconfig ens3 | grep -o " inet addr:[^ ]*" | cut -f 2 -d':')
            echo -e "\n$MYHOSTNAME $MYIP\n" >> /etc/hosts
                
  node_run_init:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config: |
        #!/bin/sh
        sed -i -e '/^PermitRootLogin/s/^.*$/PermitRootLogin yes/' /etc/ssh/sshd_config
        service sshd restart
        
  minion_init:
    type: OS::Heat::MultipartMime
    properties:
      parts:
      - config: {get_resource: node_files_init}
      - config: {get_resource: node_run_init}

  k8minion1:
    type: OS::Nova::Server
    properties:
      name: { get_param: k8_minion1 }
      image: { get_param: k8_image }
      flavor: { get_param: k8_flavor }
      networks:
      - network: { get_param: NetID }
      user_data_format: RAW
      user_data:
        get_resource: minion_init
      
  k8minion2:
    type: OS::Nova::Server
    properties:
      name: { get_param: k8_minion2 }
      image: { get_param: k8_image }
      flavor: { get_param: k8_flavor }
      networks:
      - network: { get_param: NetID }
      user_data_format: RAW
      user_data:
        get_resource: minion_init
      
  master_files_init:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
        chpasswd:
          list:
            str_replace:
                template: |
                    root:CPASSWD
                    ubuntu:CPASSWD
                params:
                    CPASSWD: { get_param: k8_passwd }
          expire: False
        ssh_pwauth: True
        write_files:
        - path: /root/preinstall.sh
          owner: "root:root"
          permissions: "0755"
          content: |
            #!/bin/bash

            # VERIFY NTP IS SETUP
            if ! dpkg -l | grep "ntp " > /dev/nul; then apt-get install -y ntp 2>&1; fi

            # ADD KUBERNETES SOURCES
            apt-get update 2>&1
            apt-get install -y apt-transport-https 2>&1
            curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -  2>&1
            echo "deb http://apt.kubernetes.io/ kubernetes-xenial main" >/etc/apt/sources.list.d/kubernetes.list
            apt-get update 2>&1

            # INSTALL DOCKER AND K8 IF THEY ARE NOT INSTALLED ALREADY.
            apt-get install -y docker.io aufs-tools  2>&1
	    apt-get install -y kubeadm=1.11.0-00 kubelet=1.11.0-00 kubectl=1.10.2-00 kubernetes-cni=0.6.0-00 --allow-downgrades 2>&1            
	    # apt-get install -y kubeadm=1.9.7-00 kubelet=1.9.7-00 kubectl=1.9.7-00 kubernetes-cni --allow-downgrades  2>&1

            # INSTALL PYTHON AND OTHER TOOLS
            apt-get install -y python2.7-dev python-pip python-setuptools python-crypto unzip 2>&1
            pip install --upgrade pip
            
            # ADD HOSTNAME
            MYHOSTNAME=$(hostname)
            MYIP=$(ifconfig ens3 | grep -o " inet addr:[^ ]*" | cut -f 2 -d':')
            echo -e "\n$MYHOSTNAME $MYIP\n" >> /etc/hosts

        - path: /root/setup_master.sh
          owner: "root:root"
          permissions: "0755"
          content:
            str_replace:
                template: |
                    #!/bin/bash
                    exec >> /root/setup_master.log
                    exec 2>&1
                    
                    echo "# SETUP SHELL VARIABLES"
                    export USER=root
                    export HOME=/root
                    cd $HOME
                    echo "Beginning $0 as user [$USER] in pwd [$PWD] with home [$HOME]"
                    
                    echo "# SETUP ROOT LOGIN WITH KEYS"
                    export SSHPASS=CPASSWD
                    apt-get update
                    apt-get install -y sshpass
                    #rm -rf ~/.ssh
                    if ! [ -f ~/.ssh/id_rsa ]; then 
                        echo "  Creating rsa key [~/.ssh/id_rsa]"
                        ssh-keygen -t rsa -f ~/.ssh/id_rsa -P ""
                    fi
                    ssh-keygen -f "~/.ssh/known_hosts" -R MINION1_IP
                    ssh-keygen -f "~/.ssh/known_hosts" -R MINION2_IP
                    cat ~/.ssh/id_rsa.pub >> ~/.ssh/authorized_keys
                    MASTER_IP=$(ifconfig ens3 | grep -o " inet addr:[^ ]*" | cut -f 2 -d':')
                    ssh-keyscan -H $MASTER_IP >> ~/.ssh/known_hosts 2>&1
                    ssh-keyscan -H MINION1_IP     >> ~/.ssh/known_hosts 2>&1
                    sshpass -e ssh-copy-id -i ~/.ssh/id_rsa.pub root@MINION1_IP  2>&1
                    ssh-keyscan -H MINION2_IP     >> ~/.ssh/known_hosts 2>&1
                    sshpass -e ssh-copy-id -i ~/.ssh/id_rsa.pub root@MINION2_IP  2>&1
                   
                    echo "# ADDING MASTER TO WORKER HOSTS FILE"
                    MYHOSTNAME=$(hostname)
                    MYIP=$(ifconfig ens3 | grep -o " inet addr:[^ ]*" | cut -f 2 -d':')
                    ssh root@MINION1_IP "echo -e \"\n$MYHOSTNAME $MYIP\n\" >> /etc/hosts"
                    ssh root@MINION2_IP "echo -e \"\n$MYHOSTNAME $MYIP\n\" >> /etc/hosts"
                    
                    echo "# RUN PRESCRIPT ON CONTROLLER"
                    chmod +x /root/preinstall.sh
                    /root/preinstall.sh

                    echo "# RUN PRESCRIPT ON WORKERS"
                    ssh root@MINION1_IP 'chmod +x /root/preinstall.sh; /root/preinstall.sh;'
                    ssh root@MINION2_IP 'chmod +x /root/preinstall.sh; /root/preinstall.sh;'
                    
                    echo "# INTIALIZE MASTER"
                    kubeadm init --pod-network-cidr=K8CIDR
                    
                    echo "# COPY K8 CONFIG TO DEFAULT LOCATION (OR USE export KUBECONFIG=/etc/kubernetes/admin.conf)"
                    mkdir -p ~/.kube
                    cp /etc/kubernetes/admin.conf ~/.kube/config
                    chown $(id -u):$(id -g) ~/.kube/config
                    kubectl get nodes
                    
                    echo "# JOIN WORKERS TO CLUSTER"
                    K8_TOKEN=$(kubeadm token list | grep 'kubeadm init' | awk '{print $1;}')
                    MASTER_IP=$(ifconfig ens3 | grep -o " inet addr:[^ ]*" | cut -f 2 -d':')
                    JOINCMD=$(grep "kubeadm join --token " setup_master.log)
                    echo "# USING JOIN CMD [$JOINCMD]"
                    ssh root@MINION1_IP "$JOINCMD"
                    ssh root@MINION2_IP "$JOINCMD"

                    echo "# INSTALL CALICO"
                    curl -LO https://docs.projectcalico.org/v3.1/getting-started/kubernetes/installation/hosted/rbac-kdd.yaml
                    curl -LO https://docs.projectcalico.org/v3.1/getting-started/kubernetes/installation/hosted/kubernetes-datastore/calico-networking/1.7/calico.yaml
                    sed -i "s|192.168.0.0/16|K8CIDR|g" calico.yaml
                    kubectl apply -f rbac-kdd.yaml
                    kubectl apply -f calico.yaml

                params:
                    CPASSWD: { get_param: k8_passwd }
                    MINION1_IP: { get_attr: [ k8minion1, first_address ] }
                    MINION2_IP: { get_attr: [ k8minion2, first_address ] }
                    K8CIDR: { get_param: k8_network_cidr }

  master_run_init:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config: |
        #!/bin/sh
        sed -i -e '/^PermitRootLogin/s/^.*$/PermitRootLogin yes/' /etc/ssh/sshd_config
        service sshd restart
        /root/setup_master.sh
        
  master_init:
    type: OS::Heat::MultipartMime
    properties:
      parts:
      - config: {get_resource: master_files_init}
      - config: {get_resource: master_run_init}

  k8master:
    type: OS::Nova::Server
    properties:
      name: { get_param: k8_master }
      image: { get_param: k8_image }
      flavor: { get_param: k8_flavor }
      networks:
      - network: { get_param: NetID }
      user_data_format: RAW
      user_data:
        get_resource: master_init


outputs:
    kube_master:
        value: {get_attr: [ k8master, first_address ]}
        description: >
            This is the ip address of the Kubernetes master server.

